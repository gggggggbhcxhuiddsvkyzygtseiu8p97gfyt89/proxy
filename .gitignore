/**
 * Creates a proxy for a GitHub repository.
 * This function allows users to create a proxy that can be used to interact with GitHub's API.
 * 
 * @param {string} repo - The full name of the repository (e.g., "owner/repo").
 * @param {string} token - The GitHub personal access token for authentication.
 * @returns {object} A proxy object that can be used to interact with the GitHub repository.
 */
function createGitHubProxy(repo, token) {
    const baseUrl = `https://api.github.com/repos/${repo}`;

    /**
     * Fetches data from the GitHub API.
     * 
     * @param {string} endpoint - The API endpoint to fetch data from.
     * @returns {Promise<object>} A promise that resolves to the response data.
     * @throws {Error} Throws an error if the fetch operation fails.
     */
    async function fetchData(endpoint) {
        const response = await fetch(endpoint, {
            method: 'GET',
            headers: {
                'Authorization': `token ${token}`,
                'Accept': 'application/vnd.github.v3+json'
            }
        });

        if (!response.ok) {
            throw new Error(`GitHub API error: ${response.status} ${response.statusText}`);
        }

        return response.json();
    }

    return {
        /**
         * Gets the details of the repository.
         * 
         * @returns {Promise<object>} A promise that resolves to the repository details.
         */
        getRepoDetails: async function() {
            return await fetchData(baseUrl);
        },

        /**
         * Lists the issues for the repository.
         * 
         * @returns {Promise<Array>} A promise that resolves to an array of issues.
         */
        listIssues: async function() {
            return await fetchData(`${baseUrl}/issues`);
        },

        /**
         * Creates a new issue in the repository.
         * 
         * @param {string} title - The title of the issue.
         * @param {string} body - The body of the issue.
         * @returns {Promise<object>} A promise that resolves to the created issue.
         */
        createIssue: async function(title, body) {
            const response = await fetch(`${baseUrl}/issues`, {
                method: 'POST',
                headers: {
                    'Authorization': `token ${token}`,
                    'Accept': 'application/vnd.github.v3+json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ title, body })
            });

            if (!response.ok) {
                throw new Error(`Failed to create issue: ${response.status} ${response.statusText}`);
            }

            return response.json();
        }
    };
}

// Example Usage
const myRepoProxy = createGitHubProxy('owner/repo', 'your_personal_access_token');

// Fetch repository details
myRepoProxy.getRepoDetails()
    .then(data => console.log('Repository Details:', data))
    .catch(error => console.error('Error fetching repo details:', error));

// List issues
myRepoProxy.listIssues()
    .then(issues => console.log('Issues:', issues))
    .catch(error => console.error('Error listing issues:', error));

// Create a new issue
myRepoProxy.createIssue('New Issue Title', 'This is the body of the new issue.')
    .then(issue => console.log('Created Issue:', issue))
    .catch(error => console.error('Error creating issue:', error));
